name: "Setup, Build, Test, and Deploy"

on:
  push:
    branches:
      - "feature/*" # matches every branch containing 'feature/'
      - "bugfix/*" # matches every branch containing 'bugfix/'
      - "hotfix/*" # matches every branch containing 'hotfix/'
      - "!main" # excludes the 'main' branch
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"] # Config the virtual env - Python version 3.11 will be used only.

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov build twine
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest --doctest-modules --junitxml=junit/test-results.xml --cov=entity_recognition_service --cov-report=html --cov-report=xml

      - name: Upload JUnit Test Results
        uses: actions/upload-artifact@v4
        with:
          name: junit-test-results
          path: junit/test-results.xml

      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: html-coverage-report
          path: htmlcov/

      - name: Upload XML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: xml-coverage-report
          path: coverage.xml

      - name: Build package
        run: |
          python -m build

      - name: Upload package to Test PyPI
        if: startsWith(github.ref, 'refs/heads/feature/')
        run: |
          twine upload --repository testpypi dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_KEY }}

      - name: Upload package to PyPI
        if: github.ref == 'refs/heads/main'
        run: |
          twine upload dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_KEY }}
