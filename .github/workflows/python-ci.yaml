name: "Setup, Build, Test, and Deploy"

on:
  push:
    branches:
      - "feature/*" # matches every branch containing 'feature/'
      - "bugfix/*" # matches every branch containing 'bugfix/'
      - "hotfix/*" # matches every branch containing 'hotfix/'
      - "!main" # excludes the 'main' branch
  pull_request:
    branches:
      - main
  release:
    types:
      - created

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: |
          poetry run coverage run --source=src/entity_recognition_service -m pytest --doctest-modules --junitxml=junit/test-results.xml
          poetry run coverage report
          poetry run coverage html
          poetry run coverage xml

      - name: Upload JUnit Test Results
        uses: actions/upload-artifact@v4
        with:
          name: junit-test-results
          path: junit/test-results.xml

      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: html-coverage-report
          path: htmlcov/

      - name: Upload XML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: xml-coverage-report
          path: coverage.xml

      - name: Build package
        run: poetry build

      - name: Publish package to PyPI
        run: poetry publish --username '__token__' --password ${{ secrets.PYPI_API_KEY }}